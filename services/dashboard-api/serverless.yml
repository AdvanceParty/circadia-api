service: circadiaapi
app: circadiaapi-app
org: advanceparty

plugins:
  - serverless-dotenv-plugin
  - serverless-dynamodb-local
  - serverless-offline

custom:
  apiVersion: 'v01'
  # dynamodb:
  #   start:
  #     port: 8000
  #     inMemory: true
  #     migrate: false
  # migration:
  #   dir: offline/migrations

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-southeast-2
  stage: dev
  environment:
    USER_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  apiKeys:
    - CIRCADIA_CLIENT_KEY
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USER_TABLE}'

# service-wide environment variables
environment:
  SLACK_BOT_TOKEN: ${param:SLACK_BOT_TOKEN}
  SLACK_SIGNING_SECRET: ${param:SLACK_SIGNING_SECRET}
  CLIENT_SECRET: ${param:CLIENT_SECRET}
  TEMP_API_PW: ${param:TEMP_API_PW}

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  getUserList:
    handler: functions/slack.userList
    events:
      - http:
          path: api/slack/users
          method: get
          cors: true
          private: true
  # saveUser:
  #   handler: functions/rest.addUser
  #   events:
  #     - http:
  #         path: api/users/add
  #         method: get
  #         cors: true
  #         private: true
  # create:
  #   handler: functions/create.create
  #   events:
  #     - http:
  #         path: api/users/create
  #         method: post
  #         cors: true
  #         # private: true
  # loadUsers:
  #   handler: functions/rest.loadUser
  #   events:
  #     - http:
  #         path: api/users/get
  #         method: get
  #         cors: true
  #         private: true
  # websocket:
  #   handler: handler.websocket.socket
  #   events:
  #     - websocket:
  #       route: $connect
  #     - websocket:
  #         route: $default
  #     - websocket:
  #         route: $disconnect
# resources:
#   Resources:
#     UsersTable:
#       Type: AWS::DynamoDB::Table
#       # BillingMode: PAY_PER_REQUEST
#       DeletionPolicy: Retain
#       Properties:
#         AttributeDefinitions:
#           - AttributeName: userId
#             AttributeType: S
#           - AttributeName: userName
#             AttributeType: S
#         KeySchema:
#           - AttributeName: userId
#             KeyType: HASH
#         TableName: ${self:provider.environment.USER_TABLE}
