service: circadiaapi
app: circadiaapi-app
org: advanceparty

plugins:
  - serverless-dotenv-plugin
  - serverless-dynamodb-local
  - serverless-offline

custom:
  apiVersion: 'v01'
  usersTableName: users
  # dynamodb:
  #   start:
  #     port: 8000
  #     inMemory: true
  #     migrate: false
  # migration:
  #   dir: offline/migrations

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-southeast-2
  stage: dev
  environment:
    USER_TABLE: ${self:custom.usersTableName}
  apiKeys:
    - CIRCADIA_CLIENT_KEY
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'table/${self:custom.usersTableName}'

# service-wide environment variables
environment:
  SLACK_BOT_TOKEN: ${param:SLACK_BOT_TOKEN}
  SLACK_SIGNING_SECRET: ${param:SLACK_SIGNING_SECRET}
  CLIENT_SECRET: ${param:CLIENT_SECRET}
  TEMP_API_PW: ${param:TEMP_API_PW}

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  getUserList:
    handler: functions/slack.userList
    events:
      - http:
          path: api/users
          method: get
          cors: true
          private: true
  getMessages:
    handler: functions/getMessages.getMessages
    events:
      - http:
          path: api/getMessages
          method: get
  putMessage:
    handler: functions/putMessage.putMessage
    events:
      - http:
          path: api/putMessage
          method: post
  # websocket:
  #   handler: handler.websocket.socket
  #   events:
  #     - websocket:
  #       route: $connect
  #     - websocket:
  #         route: $default
  #     - websocket:
  #         route: $disconnect
resources:
  Resources:
    MessagesTable:
      # BillingMode: PAY_PER_REQUEST
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
