service: circadiaapi
app: circadiaapi-app
org: advanceparty

plugins:
  - serverless-plugin-scripts
  - serverless-dotenv-plugin
  - serverless-dynamodb-local
  - serverless-offline

custom:
  apiVersion: 'v01'
  usersTableName: circadia-users-${opt:stage, 'dev'}
  userProfilesTableName: circadia-userProfiles-${opt:stage, 'dev'}
  region: ap-southeast-2
  scripts:
    hooks:
      'deploy:finalize': sls invoke -f refreshMemberList

provider:
  name: aws
  runtime: nodejs12.x
  region: ${self:custom.region}
  stage: dev
  environment:
    REGION: ${self:custom.region}
    USER_TABLE: ${self:custom.usersTableName}
    USER_PROFILES_TABLE: ${self:custom.userProfilesTableName}
  apiKeys:
    - CIRCADIA_CLIENT_KEY
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'table/${self:custom.usersTableName}'
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'table/${self:custom.userProfilesTableName}'

# service-wide environment variables
environment:
  SLACK_BOT_TOKEN: ${param:SLACK_BOT_TOKEN}
  SLACK_SIGNING_SECRET: ${param:SLACK_SIGNING_SECRET}
  CLIENT_SECRET: ${param:CLIENT_SECRET}
  TEMP_API_PW: ${param:TEMP_API_PW}

functions:
  refreshMemberList:
    handler: functions/util/slack/members.fetch
    events:
      - schedule:
          rate: rate(6 hours)
          enabled: true
      - http:
          path: utils/slack/members/fetch
          method: get
          cors: true
          private: true
  refreshPresence:
    handler: functions/util/slack/presence.refreeshDb
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: true
      - http:
          path: utils/slack/members/presence
          method: get
          cors: true
          private: true
  listUsers:
    handler: functions/handlers.listUsers
    events:
      - http:
          path: api/users/list
          method: get
          cors: true
          private: true
resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    UserStatusTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        TableName: ${self:custom.userProfilesTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
