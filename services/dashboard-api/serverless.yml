service: circadiaapi
app: circadiaapi-app
org: advanceparty

plugins:
  - serverless-plugin-scripts
  - serverless-dotenv-plugin
  - serverless-dynamodb-local
  - serverless-offline

custom:
  version: 'v01'
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-2'}
  namespace: circadia-${self:custom.version}-${self:custom.stage}
  apiBasepath: api/${self:custom.version}
  dbTable_Users: ${self:custom.namespace}-users
  dbTable_wsConnections: ${self:custom.namespace}-wsConnections
  scripts:
    hooks:
      'deploy:finalize': sls invoke -f fetchSlackMembers

provider:
  name: aws
  runtime: nodejs12.x
  region: ${self:custom.region}
  stackName: ${self:custom.namespace}-stack
  apiName: ${self:custom.namespace}-api
  websocketsApiName: ${self:custom.namespace}-websocket
  websocketsApiRouteSelectionExpression: $request.body.action
  stage: ${self:custom.stage}
  environment:
    REGION: ${self:custom.region}
    USER_TABLE: ${self:custom.dbTable_Users}
    WS_CONNECTIONS_TABLE: ${self:custom.dbTable_wsConnections}
  apiKeys:
    - CIRCADIA_CLIENT_KEY
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'execute-api:ManageConnections'
      Resource:
        - 'arn:aws:execute-api:*:*:**/@connections/*'
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'table/${self:custom.dbTable_wsConnections}'
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'table/${self:custom.dbTable_Users}'

# service-wide environment variables
environment:
  SLACK_BOT_TOKEN: ${param:SLACK_BOT_TOKEN}
  SLACK_SIGNING_SECRET: ${param:SLACK_SIGNING_SECRET}
  CLIENT_SECRET: ${param:CLIENT_SECRET}

  # functions
functions:
  #### Handlers for caching external data sources with db ####
  fetchSlackMembers:
    handler: handlers/slackFetchers.fetchAllMembers
    events:
      - schedule:
          rate: rate(6 hours)
          enabled: true
      - http:
          path: ${self:custom.apiBasepath}/import/slack/members
          method: get
          cors: true
          private: true
  refreshPresence:
    handler: handlers/slackFetchers.fetchAllPresence
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: true
      - http:
          path: ${self:custom.apiBasepath}/import/slack/memberPresence
          method: get
          cors: true
          private: true
  #### Main Handlers for Web Application ####
  listUsers:
    handler: handlers/webApp.listUsers
    events:
      - http:
          path: ${self:custom.apiBasepath}/users/list
          method: get
          cors: true
          private: true

  #### Main Handlers for WebSocket API ####
  wsConnectionHandler:
    handler: handlers/wsTest.wsConnectionHandler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
  wsDefaultHandler:
    handler: handlers/wsTest.wsDefaultHandler
    events:
      - websocket:
          route: $default
  wsSendMessageHandler:
    handler: handlers/wsTest.wsSendMessageHandler
    events:
      - websocket:
          route: sendMessage

### AWS RESOURCES
resources:
  Resources:
    WSClientsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        TableName: ${self:custom.dbTable_wsConnections}
        AttributeDefinitions:
          - AttributeName: 'userId'
            AttributeType: 'S'
          - AttributeName: 'connectionId'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'userId'
            KeyType: 'HASH'
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: websocket-users-connections-connectionId-GSI
            KeySchema:
              - AttributeName: connectionId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    UserStatusTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        TableName: ${self:custom.dbTable_Users}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
