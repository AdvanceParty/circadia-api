service: circadia

plugins:
  - serverless-plugin-scripts
  - serverless-dotenv-plugin
  - serverless-dynamodb-local
  - serverless-offline

frameworkVersion: '>=1.38.0 <2.0.0'

custom:
  version: 'v01'
  corsOrigin: '*'
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-2'}
  namespace: ${self:service}-${self:custom.version}-${self:custom.stage}
  apiBasepath: api/${self:custom.version}
  dbTable_Users: ${self:custom.namespace}-users
  dbTable_wsConnections: ${self:custom.namespace}-wsConnections
  scripts:
    hooks:
      'deploy:finalize': sls invoke -f refreshSlackMembers

provider:
  name: aws
  runtime: nodejs12.x
  region: ${self:custom.region}
  stage: ${self:custom.stage}
  stackName: ${self:custom.namespace}
  apiName: ${self:custom.namespace}-apigw
  websocketsApiName: ${self:custom.namespace}-apigw-websocket
  websocketsApiRouteSelectionExpression: $request.body.action
  environment:
    CORS_ORIGIN: ${self:custom.corsOrigin}
    REGION: ${self:custom.region}
    USER_TABLE: ${self:custom.dbTable_Users}
    WS_CONNECTIONS_TABLE: ${self:custom.dbTable_wsConnections}
    WEBSOCKET_API_ENDPOINT: !Join ['', ['https://', !Ref WebsocketsApi, '.execute-api.', '${self:custom.region}', '.amazonaws.com/', '${self:custom.stage}/']]
    SLACK_BOT_TOKEN: ${param:SLACK_BOT_TOKEN}
    SLACK_SIGNING_SECRET: ${param:SLACK_SIGNING_SECRET}
    CLIENT_SECRET: ${param:CLIENT_SECRET}
  apiKeys:
    - CIRCADIA_CLIENT_KEY
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'execute-api:ManageConnections'
      Resource:
        - 'arn:aws:execute-api:${opt:region, self:provider.region}:*:**/@connections/*'
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'table/${self:custom.dbTable_wsConnections}'
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'table/${self:custom.dbTable_Users}'
# functions
functions:
  #### Handlers for caching external data sources with db ####
  refreshSlackMembers:
    handler: handler.refreshSlackMembers
    events:
      - schedule:
          rate: rate(6 hours)
          enabled: true
      - http:
          path: ${self:custom.apiBasepath}/import/slack/members
          method: get
          cors: true
          private: true
  refreshSlackMemberPresence:
    handler: handler.refreshSlackMemberPresence
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: true
      - http:
          path: ${self:custom.apiBasepath}/import/slack/memberPresence
          method: get
          cors: true
          private: true
  #### Main Handlers for Web Application ####
  listUsers:
    handler: handler.listUsers
    events:
      - http:
          path: ${self:custom.apiBasepath}/users/list
          method: get
          cors: true
          private: true

  #### Main Handlers for WebSocket API ####
  wsConnectionHandler:
    handler: handlers/wsTest.wsConnectionHandler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
  wsDefaultHandler:
    handler: handlers/wsTest.wsDefaultHandler
    events:
      - websocket:
          route: $default
  wsSendMessageHandler:
    handler: handlers/wsTest.wsSendMessageHandler
    events:
      - websocket:
          route: sendMessage

### AWS RESOURCES
resources:
  Resources:
    WSClientsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        TableName: ${self:custom.dbTable_wsConnections}
    UserStatusTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        TableName: ${self:custom.dbTable_Users}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
